
SPI_Slave_Drv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000954  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000047e  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b8 03 	call	0x770	; 0x770 <main>
  64:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_vidInitSlave>:
#include "../DIO_DRV/DIO_Int.h"

#include "SPI_cfg.h"

void SPI_vidInitSlave(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/*Enable the SPI by setting Bit 6 – SPE: SPI Enable in register SPCR*/
	/*Choose the Data order to be MSB by setting Bit 5 – DORD: Data Order */
	/*Select the SPI as Slave, Clear Bit 4 – MSTR: Master/Slave Select*/
	/*Choose the CPOL=0 and CPHA= 0, Bit 3 – CPOL: Clock Polarity, Bit 2 – CPHA: Clock Phase*/
	/*Choose prescaler value= 16 , Clear SPR1, set SPR0 */
	SET_BIT(SPCR,6);
  74:	ad e2       	ldi	r26, 0x2D	; 45
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ed e2       	ldi	r30, 0x2D	; 45
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
	CLR_BIT(SPCR,5);
  82:	ad e2       	ldi	r26, 0x2D	; 45
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ed e2       	ldi	r30, 0x2D	; 45
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	8c 93       	st	X, r24
	CLR_BIT(SPCR,4);
  90:	ad e2       	ldi	r26, 0x2D	; 45
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ed e2       	ldi	r30, 0x2D	; 45
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	8c 93       	st	X, r24
	CLR_BIT(SPCR,3);
  9e:	ad e2       	ldi	r26, 0x2D	; 45
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	ed e2       	ldi	r30, 0x2D	; 45
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	8c 93       	st	X, r24
	CLR_BIT(SPCR,2);
  ac:	ad e2       	ldi	r26, 0x2D	; 45
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	ed e2       	ldi	r30, 0x2D	; 45
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8b 7f       	andi	r24, 0xFB	; 251
  b8:	8c 93       	st	X, r24
	CLR_BIT(SPCR,1);
  ba:	ad e2       	ldi	r26, 0x2D	; 45
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	ed e2       	ldi	r30, 0x2D	; 45
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	8c 93       	st	X, r24
	SET_BIT(SPCR,0);
  c8:	ad e2       	ldi	r26, 0x2D	; 45
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	ed e2       	ldi	r30, 0x2D	; 45
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8c 93       	st	X, r24


	/*MOSI -> PB5 as Input*/
	DIO_SetPinDir(PORTB,PIN_5,INPUT);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	65 e0       	ldi	r22, 0x05	; 5
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDir>
	/*MISO -> PB6 as Output*/
	DIO_SetPinDir(PORTB,PIN_6, OUTPUT);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	66 e0       	ldi	r22, 0x06	; 6
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDir>
	/*SCK-> PB7 as Input*/
	DIO_SetPinDir(PORTB,PIN_7, INPUT);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	67 e0       	ldi	r22, 0x07	; 7
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDir>
	/*SS -> PB4 as Input*/
	DIO_SetPinDir(PORTB,PIN_4,INPUT);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	64 e0       	ldi	r22, 0x04	; 4
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDir>

}
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	08 95       	ret

00000104 <SPI_u8Tranceiver_Slave>:

u8 SPI_u8Tranceiver_Slave(u8 Loc_u8data)
{
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	00 d0       	rcall	.+0      	; 0x10a <SPI_u8Tranceiver_Slave+0x6>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	8a 83       	std	Y+2, r24	; 0x02
	volatile u8 spsr;
	/*Store the data in SPDR Register*/
	SPDR=Loc_u8data;
 110:	ef e2       	ldi	r30, 0x2F	; 47
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	8a 81       	ldd	r24, Y+2	; 0x02
 116:	80 83       	st	Z, r24
	/* Wait for reception complete, wait till SPIF Flag is set*/
	while(GET_BIT(SPSR,7)==0);
 118:	ee e2       	ldi	r30, 0x2E	; 46
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	dc f7       	brge	.-10     	; 0x118 <SPI_u8Tranceiver_Slave+0x14>
	/*Dummy read for SPSR register to clear the SPIF: SPI Interrupt Flag*/
	spsr=SPSR;
 122:	ee e2       	ldi	r30, 0x2E	; 46
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	89 83       	std	Y+1, r24	; 0x01
	/* Return data register */
	return SPDR;
 12a:	ef e2       	ldi	r30, 0x2F	; 47
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z

}
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <DIO_SetPinDir>:

/*****************Interfaces*******************/
/****************DIO_SetPinDir*****************/
/*Set Pin Direction*/
void DIO_SetPinDir(u8 Port_ID, u8 Pin_no, u8 Pin_Dir)
{
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	27 97       	sbiw	r28, 0x07	; 7
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	6a 83       	std	Y+2, r22	; 0x02
 152:	4b 83       	std	Y+3, r20	; 0x03
	/*Check the Port ID and Pin value are valid*/
	if((Port_ID <= PORTD)&&(Pin_no <= PIN_7))
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	84 30       	cpi	r24, 0x04	; 4
 158:	08 f0       	brcs	.+2      	; 0x15c <DIO_SetPinDir+0x22>
 15a:	ee c0       	rjmp	.+476    	; 0x338 <DIO_SetPinDir+0x1fe>
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_SetPinDir+0x2a>
 162:	ea c0       	rjmp	.+468    	; 0x338 <DIO_SetPinDir+0x1fe>
	{
		/*The ID is valid check the Pin Direction*/
		if(Pin_Dir == INPUT)
 164:	8b 81       	ldd	r24, Y+3	; 0x03
 166:	88 23       	and	r24, r24
 168:	09 f0       	breq	.+2      	; 0x16c <DIO_SetPinDir+0x32>
 16a:	74 c0       	rjmp	.+232    	; 0x254 <DIO_SetPinDir+0x11a>
		{
			/*Configure Pin as Input*/
			switch(Port_ID)
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	3f 83       	std	Y+7, r19	; 0x07
 174:	2e 83       	std	Y+6, r18	; 0x06
 176:	8e 81       	ldd	r24, Y+6	; 0x06
 178:	9f 81       	ldd	r25, Y+7	; 0x07
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	91 05       	cpc	r25, r1
 17e:	59 f1       	breq	.+86     	; 0x1d6 <DIO_SetPinDir+0x9c>
 180:	2e 81       	ldd	r18, Y+6	; 0x06
 182:	3f 81       	ldd	r19, Y+7	; 0x07
 184:	22 30       	cpi	r18, 0x02	; 2
 186:	31 05       	cpc	r19, r1
 188:	2c f4       	brge	.+10     	; 0x194 <DIO_SetPinDir+0x5a>
 18a:	8e 81       	ldd	r24, Y+6	; 0x06
 18c:	9f 81       	ldd	r25, Y+7	; 0x07
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	69 f0       	breq	.+26     	; 0x1ac <DIO_SetPinDir+0x72>
 192:	d2 c0       	rjmp	.+420    	; 0x338 <DIO_SetPinDir+0x1fe>
 194:	2e 81       	ldd	r18, Y+6	; 0x06
 196:	3f 81       	ldd	r19, Y+7	; 0x07
 198:	22 30       	cpi	r18, 0x02	; 2
 19a:	31 05       	cpc	r19, r1
 19c:	89 f1       	breq	.+98     	; 0x200 <DIO_SetPinDir+0xc6>
 19e:	8e 81       	ldd	r24, Y+6	; 0x06
 1a0:	9f 81       	ldd	r25, Y+7	; 0x07
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	91 05       	cpc	r25, r1
 1a6:	09 f4       	brne	.+2      	; 0x1aa <DIO_SetPinDir+0x70>
 1a8:	40 c0       	rjmp	.+128    	; 0x22a <DIO_SetPinDir+0xf0>
 1aa:	c6 c0       	rjmp	.+396    	; 0x338 <DIO_SetPinDir+0x1fe>
			{
			case PORTA:
				/*Configure the required Pin in PORTA*/
				/* as input in PORTA*/
				CLR_BIT(DDRA_REG,Pin_no);
 1ac:	aa e3       	ldi	r26, 0x3A	; 58
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	ea e3       	ldi	r30, 0x3A	; 58
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 2e       	mov	r0, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPinDir+0x90>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPinDir+0x8c>
 1ce:	80 95       	com	r24
 1d0:	84 23       	and	r24, r20
 1d2:	8c 93       	st	X, r24
 1d4:	b1 c0       	rjmp	.+354    	; 0x338 <DIO_SetPinDir+0x1fe>
				break;
			case PORTB:
				/*Configure the required Pin in PORTA*/
				/* as input in PORTB*/
				CLR_BIT(DDRB_REG,Pin_no);
 1d6:	a7 e3       	ldi	r26, 0x37	; 55
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinDir+0xba>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinDir+0xb6>
 1f8:	80 95       	com	r24
 1fa:	84 23       	and	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	9c c0       	rjmp	.+312    	; 0x338 <DIO_SetPinDir+0x1fe>
				break;
			case PORTC:
				/*Configure the required Pin in PORTA*/
				/* as input in PORTC*/
				CLR_BIT(DDRC_REG,Pin_no);
 200:	a4 e3       	ldi	r26, 0x34	; 52
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e4 e3       	ldi	r30, 0x34	; 52
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 2e       	mov	r0, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_SetPinDir+0xe4>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_SetPinDir+0xe0>
 222:	80 95       	com	r24
 224:	84 23       	and	r24, r20
 226:	8c 93       	st	X, r24
 228:	87 c0       	rjmp	.+270    	; 0x338 <DIO_SetPinDir+0x1fe>
				break;
			case PORTD:
				/*Configure the required Pin in PORTA*/
				/* as input in PORTD*/
				CLR_BIT(DDRD_REG,Pin_no);
 22a:	a1 e3       	ldi	r26, 0x31	; 49
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	e1 e3       	ldi	r30, 0x31	; 49
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	48 2f       	mov	r20, r24
 236:	8a 81       	ldd	r24, Y+2	; 0x02
 238:	28 2f       	mov	r18, r24
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 2e       	mov	r0, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SetPinDir+0x10e>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SetPinDir+0x10a>
 24c:	80 95       	com	r24
 24e:	84 23       	and	r24, r20
 250:	8c 93       	st	X, r24
 252:	72 c0       	rjmp	.+228    	; 0x338 <DIO_SetPinDir+0x1fe>
				break;
			}

		}
		else if(Pin_Dir == OUTPUT)
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	09 f0       	breq	.+2      	; 0x25c <DIO_SetPinDir+0x122>
 25a:	6e c0       	rjmp	.+220    	; 0x338 <DIO_SetPinDir+0x1fe>
		{
			/*Configure Pin as Output*/
			/*Configure Pin as Input*/
			switch(Port_ID)
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	3d 83       	std	Y+5, r19	; 0x05
 264:	2c 83       	std	Y+4, r18	; 0x04
 266:	8c 81       	ldd	r24, Y+4	; 0x04
 268:	9d 81       	ldd	r25, Y+5	; 0x05
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	91 05       	cpc	r25, r1
 26e:	49 f1       	breq	.+82     	; 0x2c2 <DIO_SetPinDir+0x188>
 270:	2c 81       	ldd	r18, Y+4	; 0x04
 272:	3d 81       	ldd	r19, Y+5	; 0x05
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	31 05       	cpc	r19, r1
 278:	2c f4       	brge	.+10     	; 0x284 <DIO_SetPinDir+0x14a>
 27a:	8c 81       	ldd	r24, Y+4	; 0x04
 27c:	9d 81       	ldd	r25, Y+5	; 0x05
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	61 f0       	breq	.+24     	; 0x29a <DIO_SetPinDir+0x160>
 282:	5a c0       	rjmp	.+180    	; 0x338 <DIO_SetPinDir+0x1fe>
 284:	2c 81       	ldd	r18, Y+4	; 0x04
 286:	3d 81       	ldd	r19, Y+5	; 0x05
 288:	22 30       	cpi	r18, 0x02	; 2
 28a:	31 05       	cpc	r19, r1
 28c:	71 f1       	breq	.+92     	; 0x2ea <DIO_SetPinDir+0x1b0>
 28e:	8c 81       	ldd	r24, Y+4	; 0x04
 290:	9d 81       	ldd	r25, Y+5	; 0x05
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	91 05       	cpc	r25, r1
 296:	e9 f1       	breq	.+122    	; 0x312 <DIO_SetPinDir+0x1d8>
 298:	4f c0       	rjmp	.+158    	; 0x338 <DIO_SetPinDir+0x1fe>
			{
			case PORTA:
				/*Configure the required Pin in PORTA*/
				/* as output in PORTA*/
				SET_BIT(DDRA_REG,Pin_no);
 29a:	aa e3       	ldi	r26, 0x3A	; 58
 29c:	b0 e0       	ldi	r27, 0x00	; 0
 29e:	ea e3       	ldi	r30, 0x3A	; 58
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	48 2f       	mov	r20, r24
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	28 2f       	mov	r18, r24
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 2e       	mov	r0, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_SetPinDir+0x17e>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_SetPinDir+0x17a>
 2bc:	84 2b       	or	r24, r20
 2be:	8c 93       	st	X, r24
 2c0:	3b c0       	rjmp	.+118    	; 0x338 <DIO_SetPinDir+0x1fe>
				break;
			case PORTB:
				/*Configure the required Pin in PORTA*/
				/* as output in PORTB*/
				SET_BIT(DDRB_REG,Pin_no);
 2c2:	a7 e3       	ldi	r26, 0x37	; 55
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	e7 e3       	ldi	r30, 0x37	; 55
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	48 2f       	mov	r20, r24
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 2e       	mov	r0, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_SetPinDir+0x1a6>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_SetPinDir+0x1a2>
 2e4:	84 2b       	or	r24, r20
 2e6:	8c 93       	st	X, r24
 2e8:	27 c0       	rjmp	.+78     	; 0x338 <DIO_SetPinDir+0x1fe>
				break;
			case PORTC:
				/*Configure the required Pin in PORTA*/
				/* as output in PORTC*/
				SET_BIT(DDRC_REG,Pin_no);
 2ea:	a4 e3       	ldi	r26, 0x34	; 52
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	e4 e3       	ldi	r30, 0x34	; 52
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	48 2f       	mov	r20, r24
 2f6:	8a 81       	ldd	r24, Y+2	; 0x02
 2f8:	28 2f       	mov	r18, r24
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 2e       	mov	r0, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_SetPinDir+0x1ce>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_SetPinDir+0x1ca>
 30c:	84 2b       	or	r24, r20
 30e:	8c 93       	st	X, r24
 310:	13 c0       	rjmp	.+38     	; 0x338 <DIO_SetPinDir+0x1fe>
				break;
			case PORTD:
				/*Configure the required Pin in PORTA*/
				/* as output in PORTD*/
				SET_BIT(DDRD_REG,Pin_no);
 312:	a1 e3       	ldi	r26, 0x31	; 49
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	e1 e3       	ldi	r30, 0x31	; 49
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	48 2f       	mov	r20, r24
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 2e       	mov	r0, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_SetPinDir+0x1f6>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_SetPinDir+0x1f2>
 334:	84 2b       	or	r24, r20
 336:	8c 93       	st	X, r24
	}
	else
	{
		/*Do nothing Wrong Port ID or Pin no*/
	}
}
 338:	27 96       	adiw	r28, 0x07	; 7
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	cf 91       	pop	r28
 346:	df 91       	pop	r29
 348:	08 95       	ret

0000034a <DIO_SetPinVal>:
/*************End of DIO_SetPinDir**************/

/****************DIO_SetPinVal******************/
/*Set Pin Value*/
void DIO_SetPinVal(u8 Port_ID, u8 Pin_no, u8 Pin_Val)
{
 34a:	df 93       	push	r29
 34c:	cf 93       	push	r28
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	27 97       	sbiw	r28, 0x07	; 7
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
 35e:	89 83       	std	Y+1, r24	; 0x01
 360:	6a 83       	std	Y+2, r22	; 0x02
 362:	4b 83       	std	Y+3, r20	; 0x03
	/*Check the Port ID and Pin value are valid*/
	if((Port_ID <= PORTD)&&(Pin_no <= PIN_7))
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	84 30       	cpi	r24, 0x04	; 4
 368:	08 f0       	brcs	.+2      	; 0x36c <DIO_SetPinVal+0x22>
 36a:	ee c0       	rjmp	.+476    	; 0x548 <DIO_SetPinVal+0x1fe>
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	88 30       	cpi	r24, 0x08	; 8
 370:	08 f0       	brcs	.+2      	; 0x374 <DIO_SetPinVal+0x2a>
 372:	ea c0       	rjmp	.+468    	; 0x548 <DIO_SetPinVal+0x1fe>
	{
		/*Set the Pin value*/
		if(Pin_Val == LOW)
 374:	8b 81       	ldd	r24, Y+3	; 0x03
 376:	88 23       	and	r24, r24
 378:	09 f0       	breq	.+2      	; 0x37c <DIO_SetPinVal+0x32>
 37a:	74 c0       	rjmp	.+232    	; 0x464 <DIO_SetPinVal+0x11a>
		{
			/*Set The corresponding Pin value to Low*/
			switch(Port_ID)
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	3f 83       	std	Y+7, r19	; 0x07
 384:	2e 83       	std	Y+6, r18	; 0x06
 386:	8e 81       	ldd	r24, Y+6	; 0x06
 388:	9f 81       	ldd	r25, Y+7	; 0x07
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	91 05       	cpc	r25, r1
 38e:	59 f1       	breq	.+86     	; 0x3e6 <DIO_SetPinVal+0x9c>
 390:	2e 81       	ldd	r18, Y+6	; 0x06
 392:	3f 81       	ldd	r19, Y+7	; 0x07
 394:	22 30       	cpi	r18, 0x02	; 2
 396:	31 05       	cpc	r19, r1
 398:	2c f4       	brge	.+10     	; 0x3a4 <DIO_SetPinVal+0x5a>
 39a:	8e 81       	ldd	r24, Y+6	; 0x06
 39c:	9f 81       	ldd	r25, Y+7	; 0x07
 39e:	00 97       	sbiw	r24, 0x00	; 0
 3a0:	69 f0       	breq	.+26     	; 0x3bc <DIO_SetPinVal+0x72>
 3a2:	d2 c0       	rjmp	.+420    	; 0x548 <DIO_SetPinVal+0x1fe>
 3a4:	2e 81       	ldd	r18, Y+6	; 0x06
 3a6:	3f 81       	ldd	r19, Y+7	; 0x07
 3a8:	22 30       	cpi	r18, 0x02	; 2
 3aa:	31 05       	cpc	r19, r1
 3ac:	89 f1       	breq	.+98     	; 0x410 <DIO_SetPinVal+0xc6>
 3ae:	8e 81       	ldd	r24, Y+6	; 0x06
 3b0:	9f 81       	ldd	r25, Y+7	; 0x07
 3b2:	83 30       	cpi	r24, 0x03	; 3
 3b4:	91 05       	cpc	r25, r1
 3b6:	09 f4       	brne	.+2      	; 0x3ba <DIO_SetPinVal+0x70>
 3b8:	40 c0       	rjmp	.+128    	; 0x43a <DIO_SetPinVal+0xf0>
 3ba:	c6 c0       	rjmp	.+396    	; 0x548 <DIO_SetPinVal+0x1fe>
			{
			case PORTA:
				/*Set the required pin in PortA to low*/
				CLR_BIT(PORTA_REG, Pin_no);
 3bc:	ab e3       	ldi	r26, 0x3B	; 59
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	eb e3       	ldi	r30, 0x3B	; 59
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	48 2f       	mov	r20, r24
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	28 2f       	mov	r18, r24
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 2e       	mov	r0, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_SetPinVal+0x90>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_SetPinVal+0x8c>
 3de:	80 95       	com	r24
 3e0:	84 23       	and	r24, r20
 3e2:	8c 93       	st	X, r24
 3e4:	b1 c0       	rjmp	.+354    	; 0x548 <DIO_SetPinVal+0x1fe>
				break;
			case PORTB:
				/*Set the required pin in PortB to low*/
				CLR_BIT(PORTB_REG, Pin_no);
 3e6:	a8 e3       	ldi	r26, 0x38	; 56
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	e8 e3       	ldi	r30, 0x38	; 56
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	48 2f       	mov	r20, r24
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	28 2f       	mov	r18, r24
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 2e       	mov	r0, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_SetPinVal+0xba>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_SetPinVal+0xb6>
 408:	80 95       	com	r24
 40a:	84 23       	and	r24, r20
 40c:	8c 93       	st	X, r24
 40e:	9c c0       	rjmp	.+312    	; 0x548 <DIO_SetPinVal+0x1fe>
				break;
			case PORTC:
				/*Set the required pin in PortC to low*/
				CLR_BIT(PORTC_REG, Pin_no);
 410:	a5 e3       	ldi	r26, 0x35	; 53
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	e5 e3       	ldi	r30, 0x35	; 53
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	48 2f       	mov	r20, r24
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 2e       	mov	r0, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_SetPinVal+0xe4>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_SetPinVal+0xe0>
 432:	80 95       	com	r24
 434:	84 23       	and	r24, r20
 436:	8c 93       	st	X, r24
 438:	87 c0       	rjmp	.+270    	; 0x548 <DIO_SetPinVal+0x1fe>
				break;
			case PORTD:
				/*Set the required pin in PortD to low*/
				CLR_BIT(PORTD_REG, Pin_no);
 43a:	a2 e3       	ldi	r26, 0x32	; 50
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	e2 e3       	ldi	r30, 0x32	; 50
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	48 2f       	mov	r20, r24
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 2e       	mov	r0, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_SetPinVal+0x10e>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	0a 94       	dec	r0
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_SetPinVal+0x10a>
 45c:	80 95       	com	r24
 45e:	84 23       	and	r24, r20
 460:	8c 93       	st	X, r24
 462:	72 c0       	rjmp	.+228    	; 0x548 <DIO_SetPinVal+0x1fe>
				break;
			}
		}
		else if(Pin_Val == HIGH)
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	09 f0       	breq	.+2      	; 0x46c <DIO_SetPinVal+0x122>
 46a:	6e c0       	rjmp	.+220    	; 0x548 <DIO_SetPinVal+0x1fe>
		{
			/*Set The corresponding Pin value to High*/
			switch(Port_ID)
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	28 2f       	mov	r18, r24
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	3d 83       	std	Y+5, r19	; 0x05
 474:	2c 83       	std	Y+4, r18	; 0x04
 476:	8c 81       	ldd	r24, Y+4	; 0x04
 478:	9d 81       	ldd	r25, Y+5	; 0x05
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	91 05       	cpc	r25, r1
 47e:	49 f1       	breq	.+82     	; 0x4d2 <DIO_SetPinVal+0x188>
 480:	2c 81       	ldd	r18, Y+4	; 0x04
 482:	3d 81       	ldd	r19, Y+5	; 0x05
 484:	22 30       	cpi	r18, 0x02	; 2
 486:	31 05       	cpc	r19, r1
 488:	2c f4       	brge	.+10     	; 0x494 <DIO_SetPinVal+0x14a>
 48a:	8c 81       	ldd	r24, Y+4	; 0x04
 48c:	9d 81       	ldd	r25, Y+5	; 0x05
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	61 f0       	breq	.+24     	; 0x4aa <DIO_SetPinVal+0x160>
 492:	5a c0       	rjmp	.+180    	; 0x548 <DIO_SetPinVal+0x1fe>
 494:	2c 81       	ldd	r18, Y+4	; 0x04
 496:	3d 81       	ldd	r19, Y+5	; 0x05
 498:	22 30       	cpi	r18, 0x02	; 2
 49a:	31 05       	cpc	r19, r1
 49c:	71 f1       	breq	.+92     	; 0x4fa <DIO_SetPinVal+0x1b0>
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	9d 81       	ldd	r25, Y+5	; 0x05
 4a2:	83 30       	cpi	r24, 0x03	; 3
 4a4:	91 05       	cpc	r25, r1
 4a6:	e9 f1       	breq	.+122    	; 0x522 <DIO_SetPinVal+0x1d8>
 4a8:	4f c0       	rjmp	.+158    	; 0x548 <DIO_SetPinVal+0x1fe>
			{
			case PORTA:
				/*Set the required pin in PortA to high*/
				SET_BIT(PORTA_REG, Pin_no);
 4aa:	ab e3       	ldi	r26, 0x3B	; 59
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	eb e3       	ldi	r30, 0x3B	; 59
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	48 2f       	mov	r20, r24
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 2e       	mov	r0, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_SetPinVal+0x17e>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_SetPinVal+0x17a>
 4cc:	84 2b       	or	r24, r20
 4ce:	8c 93       	st	X, r24
 4d0:	3b c0       	rjmp	.+118    	; 0x548 <DIO_SetPinVal+0x1fe>
				break;
			case PORTB:
				/*Set the required pin in PortB to high*/
				SET_BIT(PORTB_REG, Pin_no);
 4d2:	a8 e3       	ldi	r26, 0x38	; 56
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e8 e3       	ldi	r30, 0x38	; 56
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 2e       	mov	r0, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_SetPinVal+0x1a6>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_SetPinVal+0x1a2>
 4f4:	84 2b       	or	r24, r20
 4f6:	8c 93       	st	X, r24
 4f8:	27 c0       	rjmp	.+78     	; 0x548 <DIO_SetPinVal+0x1fe>
				break;
			case PORTC:
				/*Set the required pin in PortC to high*/
				SET_BIT(PORTC_REG, Pin_no);
 4fa:	a5 e3       	ldi	r26, 0x35	; 53
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	e5 e3       	ldi	r30, 0x35	; 53
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 2e       	mov	r0, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_SetPinVal+0x1ce>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_SetPinVal+0x1ca>
 51c:	84 2b       	or	r24, r20
 51e:	8c 93       	st	X, r24
 520:	13 c0       	rjmp	.+38     	; 0x548 <DIO_SetPinVal+0x1fe>
				break;
			case PORTD:
				/*Set the required pin in PortD to high*/
				SET_BIT(PORTD_REG, Pin_no);
 522:	a2 e3       	ldi	r26, 0x32	; 50
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	e2 e3       	ldi	r30, 0x32	; 50
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	48 2f       	mov	r20, r24
 52e:	8a 81       	ldd	r24, Y+2	; 0x02
 530:	28 2f       	mov	r18, r24
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 2e       	mov	r0, r18
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_SetPinVal+0x1f6>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	0a 94       	dec	r0
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_SetPinVal+0x1f2>
 544:	84 2b       	or	r24, r20
 546:	8c 93       	st	X, r24
	}
	else
	{
		/*Do nothing wrong Port ID or Pin no*/
	}
}
 548:	27 96       	adiw	r28, 0x07	; 7
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	cf 91       	pop	r28
 556:	df 91       	pop	r29
 558:	08 95       	ret

0000055a <DIO_GetPinVal>:
/**************End of DIO_SetPinVal***************/

/*****************DIO_GetPinVal*******************/
u8 DIO_GetPinVal(u8 Port_ID, u8 Pin_no)
{
 55a:	df 93       	push	r29
 55c:	cf 93       	push	r28
 55e:	00 d0       	rcall	.+0      	; 0x560 <DIO_GetPinVal+0x6>
 560:	00 d0       	rcall	.+0      	; 0x562 <DIO_GetPinVal+0x8>
 562:	0f 92       	push	r0
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	8a 83       	std	Y+2, r24	; 0x02
 56a:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable to return the pin value*/
	/*Set the return value to 0xFF in case */
	/*of wrong PORT or PIN*/
	u8 Pin_value=(u8)0xFF;
 56c:	8f ef       	ldi	r24, 0xFF	; 255
 56e:	89 83       	std	Y+1, r24	; 0x01
	/*Check the Port ID and Pin value are valid*/
	if((Port_ID <= PORTD)&&(Pin_no <= PIN_7))
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	84 30       	cpi	r24, 0x04	; 4
 574:	08 f0       	brcs	.+2      	; 0x578 <DIO_GetPinVal+0x1e>
 576:	6b c0       	rjmp	.+214    	; 0x64e <DIO_GetPinVal+0xf4>
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	88 30       	cpi	r24, 0x08	; 8
 57c:	08 f0       	brcs	.+2      	; 0x580 <DIO_GetPinVal+0x26>
 57e:	67 c0       	rjmp	.+206    	; 0x64e <DIO_GetPinVal+0xf4>
	{
		switch(Port_ID)
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	28 2f       	mov	r18, r24
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	3d 83       	std	Y+5, r19	; 0x05
 588:	2c 83       	std	Y+4, r18	; 0x04
 58a:	4c 81       	ldd	r20, Y+4	; 0x04
 58c:	5d 81       	ldd	r21, Y+5	; 0x05
 58e:	41 30       	cpi	r20, 0x01	; 1
 590:	51 05       	cpc	r21, r1
 592:	41 f1       	breq	.+80     	; 0x5e4 <DIO_GetPinVal+0x8a>
 594:	8c 81       	ldd	r24, Y+4	; 0x04
 596:	9d 81       	ldd	r25, Y+5	; 0x05
 598:	82 30       	cpi	r24, 0x02	; 2
 59a:	91 05       	cpc	r25, r1
 59c:	34 f4       	brge	.+12     	; 0x5aa <DIO_GetPinVal+0x50>
 59e:	2c 81       	ldd	r18, Y+4	; 0x04
 5a0:	3d 81       	ldd	r19, Y+5	; 0x05
 5a2:	21 15       	cp	r18, r1
 5a4:	31 05       	cpc	r19, r1
 5a6:	61 f0       	breq	.+24     	; 0x5c0 <DIO_GetPinVal+0x66>
 5a8:	52 c0       	rjmp	.+164    	; 0x64e <DIO_GetPinVal+0xf4>
 5aa:	4c 81       	ldd	r20, Y+4	; 0x04
 5ac:	5d 81       	ldd	r21, Y+5	; 0x05
 5ae:	42 30       	cpi	r20, 0x02	; 2
 5b0:	51 05       	cpc	r21, r1
 5b2:	51 f1       	breq	.+84     	; 0x608 <DIO_GetPinVal+0xae>
 5b4:	8c 81       	ldd	r24, Y+4	; 0x04
 5b6:	9d 81       	ldd	r25, Y+5	; 0x05
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	91 05       	cpc	r25, r1
 5bc:	b9 f1       	breq	.+110    	; 0x62c <DIO_GetPinVal+0xd2>
 5be:	47 c0       	rjmp	.+142    	; 0x64e <DIO_GetPinVal+0xf4>
		{
		case PORTA:
			/*Get the Pin value from Port A*/
			Pin_value= GET_BIT(PINA_REG, Pin_no);
 5c0:	e9 e3       	ldi	r30, 0x39	; 57
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	88 2f       	mov	r24, r24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	a9 01       	movw	r20, r18
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_GetPinVal+0x7e>
 5d4:	55 95       	asr	r21
 5d6:	47 95       	ror	r20
 5d8:	8a 95       	dec	r24
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_GetPinVal+0x7a>
 5dc:	ca 01       	movw	r24, r20
 5de:	81 70       	andi	r24, 0x01	; 1
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	35 c0       	rjmp	.+106    	; 0x64e <DIO_GetPinVal+0xf4>
			break;
		case PORTB:
			/*Get the Pin value from Port B*/
			Pin_value= GET_BIT(PINB_REG, Pin_no);
 5e4:	e6 e3       	ldi	r30, 0x36	; 54
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	a9 01       	movw	r20, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_GetPinVal+0xa2>
 5f8:	55 95       	asr	r21
 5fa:	47 95       	ror	r20
 5fc:	8a 95       	dec	r24
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_GetPinVal+0x9e>
 600:	ca 01       	movw	r24, r20
 602:	81 70       	andi	r24, 0x01	; 1
 604:	89 83       	std	Y+1, r24	; 0x01
 606:	23 c0       	rjmp	.+70     	; 0x64e <DIO_GetPinVal+0xf4>
			break;
		case PORTC:
			/*Get the Pin value from Port C*/
			Pin_value= GET_BIT(PINC_REG, Pin_no);
 608:	e3 e3       	ldi	r30, 0x33	; 51
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	28 2f       	mov	r18, r24
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	88 2f       	mov	r24, r24
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	a9 01       	movw	r20, r18
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_GetPinVal+0xc6>
 61c:	55 95       	asr	r21
 61e:	47 95       	ror	r20
 620:	8a 95       	dec	r24
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_GetPinVal+0xc2>
 624:	ca 01       	movw	r24, r20
 626:	81 70       	andi	r24, 0x01	; 1
 628:	89 83       	std	Y+1, r24	; 0x01
 62a:	11 c0       	rjmp	.+34     	; 0x64e <DIO_GetPinVal+0xf4>
			break;
		case PORTD:
			/*Get the Pin value from Port D*/
			Pin_value= GET_BIT(PIND_REG, Pin_no);
 62c:	e0 e3       	ldi	r30, 0x30	; 48
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	28 2f       	mov	r18, r24
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	8b 81       	ldd	r24, Y+3	; 0x03
 638:	88 2f       	mov	r24, r24
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	a9 01       	movw	r20, r18
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_GetPinVal+0xea>
 640:	55 95       	asr	r21
 642:	47 95       	ror	r20
 644:	8a 95       	dec	r24
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_GetPinVal+0xe6>
 648:	ca 01       	movw	r24, r20
 64a:	81 70       	andi	r24, 0x01	; 1
 64c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing wrong Port ID or Pin no*/
	}

return Pin_value;
 64e:	89 81       	ldd	r24, Y+1	; 0x01
}
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	cf 91       	pop	r28
 65c:	df 91       	pop	r29
 65e:	08 95       	ret

00000660 <DIO_SetPortDir>:
/**************End of DIO_GetPinVal***************/

/*****************DIO_SetPortDir******************/
void DIO_SetPortDir(u8 Port_ID, u8 Port_Dir)
{
 660:	df 93       	push	r29
 662:	cf 93       	push	r28
 664:	00 d0       	rcall	.+0      	; 0x666 <DIO_SetPortDir+0x6>
 666:	00 d0       	rcall	.+0      	; 0x668 <DIO_SetPortDir+0x8>
 668:	cd b7       	in	r28, 0x3d	; 61
 66a:	de b7       	in	r29, 0x3e	; 62
 66c:	89 83       	std	Y+1, r24	; 0x01
 66e:	6a 83       	std	Y+2, r22	; 0x02
	/*Check the Port ID and Pin value are valid*/
	if(Port_ID <= PORTD)
 670:	89 81       	ldd	r24, Y+1	; 0x01
 672:	84 30       	cpi	r24, 0x04	; 4
 674:	90 f5       	brcc	.+100    	; 0x6da <DIO_SetPortDir+0x7a>
	{
		switch(Port_ID)
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	28 2f       	mov	r18, r24
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	3c 83       	std	Y+4, r19	; 0x04
 67e:	2b 83       	std	Y+3, r18	; 0x03
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	9c 81       	ldd	r25, Y+4	; 0x04
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	91 05       	cpc	r25, r1
 688:	d1 f0       	breq	.+52     	; 0x6be <DIO_SetPortDir+0x5e>
 68a:	2b 81       	ldd	r18, Y+3	; 0x03
 68c:	3c 81       	ldd	r19, Y+4	; 0x04
 68e:	22 30       	cpi	r18, 0x02	; 2
 690:	31 05       	cpc	r19, r1
 692:	2c f4       	brge	.+10     	; 0x69e <DIO_SetPortDir+0x3e>
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	9c 81       	ldd	r25, Y+4	; 0x04
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	61 f0       	breq	.+24     	; 0x6b4 <DIO_SetPortDir+0x54>
 69c:	1e c0       	rjmp	.+60     	; 0x6da <DIO_SetPortDir+0x7a>
 69e:	2b 81       	ldd	r18, Y+3	; 0x03
 6a0:	3c 81       	ldd	r19, Y+4	; 0x04
 6a2:	22 30       	cpi	r18, 0x02	; 2
 6a4:	31 05       	cpc	r19, r1
 6a6:	81 f0       	breq	.+32     	; 0x6c8 <DIO_SetPortDir+0x68>
 6a8:	8b 81       	ldd	r24, Y+3	; 0x03
 6aa:	9c 81       	ldd	r25, Y+4	; 0x04
 6ac:	83 30       	cpi	r24, 0x03	; 3
 6ae:	91 05       	cpc	r25, r1
 6b0:	81 f0       	breq	.+32     	; 0x6d2 <DIO_SetPortDir+0x72>
 6b2:	13 c0       	rjmp	.+38     	; 0x6da <DIO_SetPortDir+0x7a>
		{
		case PORTA:
			/*Set whole PortA direction*/
			DDRA_REG= Port_Dir;
 6b4:	ea e3       	ldi	r30, 0x3A	; 58
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	80 83       	st	Z, r24
 6bc:	0e c0       	rjmp	.+28     	; 0x6da <DIO_SetPortDir+0x7a>
			break;
		case PORTB:
			/*Set whole PortB direction*/
			DDRB_REG= Port_Dir;
 6be:	e7 e3       	ldi	r30, 0x37	; 55
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	80 83       	st	Z, r24
 6c6:	09 c0       	rjmp	.+18     	; 0x6da <DIO_SetPortDir+0x7a>
			break;
		case PORTC:
			/*Set whole PortC direction*/
			DDRC_REG= Port_Dir;
 6c8:	e4 e3       	ldi	r30, 0x34	; 52
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	80 83       	st	Z, r24
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <DIO_SetPortDir+0x7a>
			break;
		case PORTD:
			/*Set whole PortD direction*/
			DDRD_REG= Port_Dir;
 6d2:	e1 e3       	ldi	r30, 0x31	; 49
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	8a 81       	ldd	r24, Y+2	; 0x02
 6d8:	80 83       	st	Z, r24
	}
	else
	{
		/*Do nothing wrong Port ID*/
	}
}
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	cf 91       	pop	r28
 6e4:	df 91       	pop	r29
 6e6:	08 95       	ret

000006e8 <DIO_SetPortVal>:
/**************End of DIO_SetPortDir************/

/*****************DIO_SetPortVal******************/
void DIO_SetPortVal(u8 Port_ID, u8 Port_val)
{
 6e8:	df 93       	push	r29
 6ea:	cf 93       	push	r28
 6ec:	00 d0       	rcall	.+0      	; 0x6ee <DIO_SetPortVal+0x6>
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <DIO_SetPortVal+0x8>
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	89 83       	std	Y+1, r24	; 0x01
 6f6:	6a 83       	std	Y+2, r22	; 0x02
	/*Check the Port ID and Pin value are valid*/
	if(Port_ID <= PORTD)
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
 6fa:	84 30       	cpi	r24, 0x04	; 4
 6fc:	90 f5       	brcc	.+100    	; 0x762 <DIO_SetPortVal+0x7a>
	{
		switch(Port_ID)
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	28 2f       	mov	r18, r24
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	3c 83       	std	Y+4, r19	; 0x04
 706:	2b 83       	std	Y+3, r18	; 0x03
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	9c 81       	ldd	r25, Y+4	; 0x04
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	91 05       	cpc	r25, r1
 710:	d1 f0       	breq	.+52     	; 0x746 <DIO_SetPortVal+0x5e>
 712:	2b 81       	ldd	r18, Y+3	; 0x03
 714:	3c 81       	ldd	r19, Y+4	; 0x04
 716:	22 30       	cpi	r18, 0x02	; 2
 718:	31 05       	cpc	r19, r1
 71a:	2c f4       	brge	.+10     	; 0x726 <DIO_SetPortVal+0x3e>
 71c:	8b 81       	ldd	r24, Y+3	; 0x03
 71e:	9c 81       	ldd	r25, Y+4	; 0x04
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	61 f0       	breq	.+24     	; 0x73c <DIO_SetPortVal+0x54>
 724:	1e c0       	rjmp	.+60     	; 0x762 <DIO_SetPortVal+0x7a>
 726:	2b 81       	ldd	r18, Y+3	; 0x03
 728:	3c 81       	ldd	r19, Y+4	; 0x04
 72a:	22 30       	cpi	r18, 0x02	; 2
 72c:	31 05       	cpc	r19, r1
 72e:	81 f0       	breq	.+32     	; 0x750 <DIO_SetPortVal+0x68>
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	9c 81       	ldd	r25, Y+4	; 0x04
 734:	83 30       	cpi	r24, 0x03	; 3
 736:	91 05       	cpc	r25, r1
 738:	81 f0       	breq	.+32     	; 0x75a <DIO_SetPortVal+0x72>
 73a:	13 c0       	rjmp	.+38     	; 0x762 <DIO_SetPortVal+0x7a>
		{
		case PORTA:
			/*Set whole PortA value*/
			PORTA_REG= Port_val;
 73c:	eb e3       	ldi	r30, 0x3B	; 59
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	80 83       	st	Z, r24
 744:	0e c0       	rjmp	.+28     	; 0x762 <DIO_SetPortVal+0x7a>
			break;
		case PORTB:
			/*Set whole PortB value*/
			PORTB_REG= Port_val;
 746:	e8 e3       	ldi	r30, 0x38	; 56
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	8a 81       	ldd	r24, Y+2	; 0x02
 74c:	80 83       	st	Z, r24
 74e:	09 c0       	rjmp	.+18     	; 0x762 <DIO_SetPortVal+0x7a>
			break;
		case PORTC:
			/*Set whole PortC value*/
			PORTC_REG= Port_val;
 750:	e5 e3       	ldi	r30, 0x35	; 53
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	80 83       	st	Z, r24
 758:	04 c0       	rjmp	.+8      	; 0x762 <DIO_SetPortVal+0x7a>
			break;
		case PORTD:
			/*Set whole PortD value*/
			PORTD_REG= Port_val;
 75a:	e2 e3       	ldi	r30, 0x32	; 50
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	80 83       	st	Z, r24
	}
	else
	{
		/*Do nothing wrong Port ID*/
	}
}
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	0f 90       	pop	r0
 76a:	cf 91       	pop	r28
 76c:	df 91       	pop	r29
 76e:	08 95       	ret

00000770 <main>:
#include "../LIB/BIT_MATH.h"
#include "../DIO_DRV/DIO_Int.h"
#include "../SPI_Drv/SPI_Int.h"

void main(void)
{
 770:	df 93       	push	r29
 772:	cf 93       	push	r28
 774:	0f 92       	push	r0
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
	SPI_vidInitSlave();
 77a:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_vidInitSlave>

	DIO_SetPinDir(PORTC,PIN_0, OUTPUT);
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDir>

	DIO_SetPinVal( PORTC, PIN_0, LOW);
 788:	82 e0       	ldi	r24, 0x02	; 2
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinVal>

	 u8 result=0;
 792:	19 82       	std	Y+1, r1	; 0x01

	while(1){

	 result=SPI_u8Tranceiver_Slave(3);
 794:	83 e0       	ldi	r24, 0x03	; 3
 796:	0e 94 82 00 	call	0x104	; 0x104 <SPI_u8Tranceiver_Slave>
 79a:	89 83       	std	Y+1, r24	; 0x01

	if(result=='1')
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	81 33       	cpi	r24, 0x31	; 49
 7a0:	31 f4       	brne	.+12     	; 0x7ae <main+0x3e>
	{
		 DIO_SetPinVal( PORTC, PIN_0, HIGH);
 7a2:	82 e0       	ldi	r24, 0x02	; 2
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	41 e0       	ldi	r20, 0x01	; 1
 7a8:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinVal>
 7ac:	f3 cf       	rjmp	.-26     	; 0x794 <main+0x24>
	}

	else
	{
		 DIO_SetPinVal( PORTC, PIN_0, LOW);
 7ae:	82 e0       	ldi	r24, 0x02	; 2
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	40 e0       	ldi	r20, 0x00	; 0
 7b4:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinVal>
 7b8:	ed cf       	rjmp	.-38     	; 0x794 <main+0x24>

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
